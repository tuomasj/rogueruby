
$:.unshift(File.expand_path("../../lib", __FILE__))


require 'rogueruby'

def generate_move_message(entity, direction)
  { method:"move", entity_id: entity.id, direction: direction}.to_json
end

def main
  ui = UI.new
  ui.open

  world = World.new
  dispatcher = CentralDispatcher.new(world)

  world.setup_listeners(dispatcher)
  dispatcher.incoming('{"method":"create", "type":"room", "x":0,"y":0,"sections":[{"x":3,"y":2,"width":7,"height":9},{"x":10,"y":10,"width":18,"height":10},{"x":34,"y":4,"width":25,"height":15},{"x":28,"y":12,"width":6,"height":1}]}')
  dispatcher.incoming('{"method":"create", "type":"player", "id":0, "x":4, "y":3}')

  window = Window.new(0,0,ui.game_window_width,ui.game_window_height)

  player = world.current_player || Player.new({x:0, y:0})

  world_renderer = WorldRenderer.new(ui, world)
  world_renderer.render(world, player, window)

  quit = false
  ui.refresh

  loop do

    ch = ui.get_input
    ui.refresh(:game)
    if ch != nil
      case ch
      when 'q'
        break
      when UI::KEY_LEFT
        dispatcher.incoming(generate_move_message(player, "LEFT"))
      when UI::KEY_RIGHT
        dispatcher.incoming(generate_move_message(player, "RIGHT"))
      when UI::KEY_UP
        dispatcher.incoming(generate_move_message(player, "UP"))
      when UI::KEY_DOWN
        dispatcher.incoming(generate_move_message(player, "DOWN"))
      end
    end
    sleep 0.5
    STDOUT.flush
    world_renderer.render(world, player, window)
  end

  ui.close
end


main()
